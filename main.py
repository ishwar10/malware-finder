#from flask import Flask, request,jsonify
import pandas as pd
import numpy as np
from joblib import load
import uvicorn
#clsimport requests
#import tensorflow as tf
#from tensorflow import load_model
from uvicorn import run as app_run
from fastapi import FastAPI,File,UploadFile,HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import Response
from starlette.responses import RedirectResponse
import io

model=load("malwareclassifier.joblib")
print("model_loaded")


app = FastAPI()
origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/", tags=["authentication"])
async def index():
    return RedirectResponse(url="/docs")
'''

@app.post("/uploadfile/")
async def create_upload_file(file:UploadFile=File(...)):
    contents=await file.read()
    df=pd.read_csv(io.StringIO(contents.decode("utf-8")))
    return {"filename":file.filename}
    


@app.get("/predict")
async def predict_route():
    try:
        #get data from user csv file
        #conver csv file to dataframe

        y_pred = model.predict(df)
        predictions_list = y_pred.tolist()
        return {"predictions": predictions_list}
        
        
        #decide how to return file to user.
        
    except Exception :
        raise (f"Error Occured!")

'''
    
@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    try:
        # Read the uploaded file
        contents = await file.read()
        # Convert the file contents to a pandas DataFrame
        df = pd.read_csv(io.StringIO(contents.decode('utf-8')))
        df=df.drop("class",axis=1)
        # Assuming the model expects a numpy array, convert DataFrame to numpy array
        #input_array = input_df.to_numpy()
        # Make predictions
        predictions = model.predict(df.values)
        # Convert predictions to list if necessary
        predictions_list = predictions.tolist()
        return {"predictions": predictions_list}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

    
